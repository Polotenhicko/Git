// Скрипты: async, defer
// Когда браузер доходит до тега script, он не может строить DOM дальше, он должен выполнять скрипт
// Это происходит и с внешними скриптами <script src="....">
// браузер должен подождать, пока загрузится скрипт, выполнить его, и только затем обработать остальную страницу.

// Это ведёт к двум важным проблемам:
// 1. Скрипты не видят DOM-элементы ниже себя, поэтому к ним нельзя добавить обработчики и т.д.
// 2. Если вверху страницы объёмный скрипт, он «блокирует» страницу. Пользователи не видят содержимое страницы, пока он не загрузится и не запустится

// Есть путь как это исправить, поместить скрипт в конец
// Но это решение далеко от идеального
// Если будет медленный интернет, то браузер заметит скрипт после того, как загрузит документ
// На длинных страницах это будет хорошо видно

// Есть 2 атрибута которые решают эту проблему: async, defer

// defer

// говорит браузеру грузить документ дальше, а скрипт загружать в фоновом режиме
// а потом загрузить скрипт как только документ построится

// Скрипты с defer никогда не блокируют страницу
// Скрипты с defer всегда выполняются, когда дерево DOM готово, но до события DOMContentLoaded.

console.log('Повесили DOMContentLoaded');
document.addEventListener('DOMContentLoaded', function () {
  alert('DOMContentLoaded');
});

// Отложенные с помощью defer скрипты сохраняют порядок относительно друг друга, как и обычные скрипты.
// И не важно, кто быстрее загрузится

// defer только для внешних скриптов!!!

////////////////////////////////////////////////////////////////////////////////////

// async

// означает что скрипт абсолютно независим:

// 1. Страница не ждём асинхронных скриптов, содержимое обрабатывается и отображается
// 2. Событие DOMContentLoaded и асинхронные скрипты не ждут друг друга:
//  а. DOMContentLoaded может произойти как до асинхронного скрипта
//  б. так и после(малый или кеширован)
// 3. Остальные скрипты не ждут async, и сами async не ждут другие скрипты

// Если несколько async, то они могут выполняться в любом порядке

// Асинхронные скрипты очень полезны для добавления на страницу сторонних скриптов: счётчиков, рекламы и т.д.
//  Они не зависят от наших скриптов, и мы тоже не должны ждать их:

// Динамически загружаемые скрипты

const script = document.createElement('script');
script.src = 'https://javascript.info/article/script-async-defer/small.js?speed=1';
// document.body.append(script);

// про них было описано в пред главе

// По умолчанию ведут себя как async
// То есть:
// Они никого не ждут, и их никто не ждёт.
// Скрипт, который загружается первым – запускается первым (в порядке загрузки).

// Мы можем лишь изменить порядок загрузки скриптов чтобы была очередь запуска

script.async = false;
// document.body.append(script);

function loadScript(src) {
  let script = document.createElement('script');
  script.src = src;
  script.async = false;
  document.body.append(script);
}

// long.js запускается первым, так как async=false
loadScript('https://javascript.info/article/script-async-defer/long.js');
loadScript('https://javascript.info/article/script-async-defer/small.js');
