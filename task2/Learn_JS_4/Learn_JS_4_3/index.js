// Событие: change
// Событие change срабатывает по окончании изменения элемента.
// Для текстовых <input> это означает, что событие происходит при потере фокуса.

// Для других элементов: select, input type=checkbox/radio событие запускается сразу после изменения значения

// Событие: input
// Событие input срабатывает каждый раз при изменении значения.

// В отличие от событий клавиатуры, оно работает при любых изменениях значений,
//  даже если они не связаны с клавиатурными действиями: вставка с помощью мыши или распознавание речи при диктовке текста.

input.oninput = function () {
  result.innerHTML = this.value;
};

// Если мы хотим обрабатывать каждое изменение в <input>, то это событие является лучшим выбором.
// Но тут не отработают клавиши ArrowRight, ArrowLeft и подобных

// И ничего нельзя предотвратить в oninput, т.к. оно уже произошло
input2.onchange = function (e) {
  e.preventDefault();
};
// в onchange тоже

// События: cut, copy, paste
// Эти события происходят при вырезании/копировании/вставке данных.

// Они относятся к классу ClipboardEvent и обеспечивают доступ к копируемым/вставляемым данным.

// Мы также можем использовать event.preventDefault() для предотвращения действия по умолчанию,
// и в итоге ничего не скопируется / не вставится.

// Например, код, приведённый ниже, предотвращает все подобные события и показывает, что мы пытаемся вырезать/копировать/вставить:

other.oncut =
  other.oncopy =
  other.onpaste =
    function (e) {
      console.log(e.type, e.clipboardData.getData('text/plain'));
      return false;
    };

// Технически, мы можем скопировать/вставить всё. Например, мы можем скопировать файл из файловой системы и вставить его.
// запрещается генерировать «пользовательские» события буфера обмена при помощи dispatchEvent во всех браузерах, кроме Firefox.
