// Общая проблема строк, дат, чисел в JavaScript – они «не в курсе» языка и особенностей стран, где находится посетитель.

// Строки
// При сравнении сравниваются коды символов, а это неправильно,
// к примеру, в русском языке оказывается, что "ё" > "я" и "а" > "Я", хотя всем известно,
// что я – последняя буква алфавита и это она должна быть больше любой другой.
// Даты
// В разных странах принята разная запись дат. Где-то пишут 31.12.2014 (Россия), а где-то 12/31/2014 (США), где-то иначе.
// Числа
// В одних странах выводятся цифрами, в других – иероглифами, длинные числа разделяются где-то пробелом, где-то запятой.
// Все современные браузеры, кроме IE10 (но есть библиотеки и для него)
// поддерживают стандарт ECMA 402, предназначенный решить эти проблемы навсегда.

// Intl.Collator умеет правильно сравнивать и сортировать строки
// Intl.DateTimeFormat умеет формировать дату и время в соотв с языком
// Intl.NumberFormat умеет форматировать числа в соотв с языком

// Локаль - первый и самый важный аргумент всех методов, связанный с интернационализацией

// локаль описывается строкой из трёх компонентов, которые разделяются дефисом
// 1. Код языка
// 2. Код способа записи
// 3. Код страны

// На практике не всегда указаны три, обычно меньше:

// ru – русский язык, без уточнений.
// en-GB – английский язык, используемый в Англии (GB).
// en-US – английский язык, используемый в США (US).
// zh-Hans-CN – китайский язык (zh), записываемый упрощённой иероглифической письменностью (Hans), используемый в Китае.

// также через суффикс -u-* можно указывать расширения локалей, напрмиер
// "th-TH-u-nu-thai" - тайский язык (th), используемый в Таиланде (TH), с записью чисел тайскими буквами

// Все методы принимают локаль в виде строки или массива, содержащего несколько локалей в порядке предпочтения.

// Если локаль не указана или undefined – берётся локаль по умолчанию, установленная в окружении (браузере).

// localeMatcher - вспомогательная настройка, которую можно указать, она определяет способ подбора локали, есои желаемая недоступна

// 2 значения:
// "lookup" простейший порядок поиска путём обрезания суффикса
// zh-Hans-CN -> zh-Hans -> zh -> локаль по умолчанию

// "best fit" использует встроенные алгоритмы и предпочтения браузера(или другого окружения) для выобра локали
// стоит по умолчанию

// Если локалей несколько, например["zh-Hans-CN", "ru-RU"]
// то localeMatcher пытается подобрать наиболее подходящую локаль для первой из списка(китайская),
// если не получается – переходит ко второй(русской) и так далее.Если ни одной не нашёл,
// например на компьютере не совсем поддерживается ни китайский ни русский, то используется локаль по умолчанию.

// Как правило, "best fit" является здесь наилучшим выбором.

// строки

// создание
// let collator = new Intl.Collator([locales, [options]])
// locales - локаль или массив в порядке предпочтения
// options - объект с доп настройками

//
// localeMatcher – алгоритм выбора подходящей локали.

// usage – цель сравнения: сортировка "sort" или поиск "search", по умолчанию "sort".

// sensitivity – чувствительность: какие различия в символах учитывать, а какие – нет, варианты:

//        base – учитывать только разные символы, без диакритических знаков и регистра, например: а ≠ б, е = ё, а = А.
//        accent – учитывать символы и диакритические знаки, например: а ≠ б, е ≠ ё, а = А.
//        case – учитывать символы и регистр, например: а ≠ б, е = ё, а ≠ А.
//        variant – учитывать всё: символ, диакритические знаки, регистр, например: а ≠ б, е ≠ ё, а ≠ А, используется по умолчанию.
//        ignorePunctuation – игнорировать знаки пунктуации: true/false, по умолчанию false.

// numeric – использовать ли численное сравнение: true/false, если true, то будет 12 > 2, иначе 12 < 2.

// caseFirst – в сортировке должны идти первыми прописные или строчные буквы, варианты:
// "upper"(прописные), "lower"(строчные) или "false"(стандартное для локали, также является значением по умолчанию).
// Не поддерживается IE11.

// обычно подходят параметры по умолчанию
// т.е. options указывать не нужно

// let collator = new Intl.Collator([locales, [options]]);
// let result = collator.compare(str1, str2);

// пример

let collator = new Intl.Collator();

console.log('ёжик' > 'яблоко'); // ёжик больше, что неверно
console.log(collator.compare('ёжик', 'яблоко')); // -1 ёжик меньше, верно
// результат compare имеет значение 1 (больше), 0 (равно), -1 (меньше)

console.log(collator.compare('ЁжиК', 'ёжик')); // 1, разные

collator = new Intl.Collator(undefined, {
  sensitivity: 'accent',
});

console.log(collator.compare('ЁжиК', 'ёжик')); // 0, равны

// Даты

// let formatter = Intl.DateTimeFormat([locales, [options]])

// locales такой же, как и в Collator, а в options можем определять
// какие именно части даты показывать (часы, месяц, год...) и в какм формате

// ебал в рот конспектировать таблицу

// Все локали обязаны поддерживать следующие наборы настроек:

// weekday, year, month, day, hour, minute, second
// weekday, year, month, day
// year, month, day
// year, month
// month, day
// hour, minute, second

// Если указанный формат не поддерживается, то настройка formatMatcher задаёт алгоритм подбора наиболее близкого формата:
// basic – по стандартным правилам и best fit – по умолчанию, на усмотрение окружения(браузера).

// let dateString = formatter.format(date)

let date = new Date(2014, 11, 31, 12, 30, 0);

let formatter = new Intl.DateTimeFormat('ru');
console.log(formatter.format(date)); // 31.12.2014

formatter = new Intl.DateTimeFormat('en');
console.log(formatter.format(date)); // 12/31/2014

// длинная дата
formatter = new Intl.DateTimeFormat('ru', {
  weekday: 'long',
  year: 'numeric',
  month: 'long',
  day: 'numeric',
});

console.log(formatter.format(date)); // среда, 31 декабря 2014 г.

// только время

formatter = new Intl.DateTimeFormat('ru', {
  hour: 'numeric',
  minute: 'numeric',
  second: 'numeric',
});

console.log(formatter.format(date)); // 12:30:00

// числа
// Форматтер Intl.NumberFormat умеет красиво форматировать не только числа, но и валюту, а также проценты.

// let formatter = new Intl.NumberFormat([locales[, options]]);

// formatter.format(number); // форматирование

formatter = Intl.NumberFormat('ru');
console.log(formatter.format(1234567890.123)); // 1 234 567 890,123

// с опциями значимых цифр (важно только 3 первые цифры)

formatter = new Intl.NumberFormat('ru', {
  maximumSignificantDigits: 3,
});

console.log(formatter.format(1234567890.123)); // 1 230 000 000

// с опциями для валюты
formatter = new Intl.NumberFormat('ru', {
  style: 'currency',
  currency: 'RUB',
});

console.log(formatter.format(1234.5)); // 1 234,50 ₽

// с 2 цифрами после запятой

formatter = new Intl.NumberFormat('ru', {
  style: 'currency',
  currency: 'GBP',
  minimumFractionDigits: 2,
});

console.log(formatter.format(1234.5)); // 1 234,50 £

// методы форматирования также поддерживаются в обычных строках, датах, числах

// String.prototype.localeCompare(that [, locales [, options]])
// Сравнивает строку с другой, с учётом локали, например:

let str = 'ёжик';

console.log(str.localeCompare('яблоко', 'ru')); // -1

// Date.prototype.toLocaleString([locales [, options]])
// Форматирует дату в соответствии с локалью, например:

date = new Date(2014, 11, 31, 12, 0);
console.log(date.toLocaleString('ru', { year: 'numeric', month: 'long' })); // Декабрь 2014

// Date.prototype.toLocaleDateString([locales [, options]])
// То же, что и выше, но опции по умолчанию включают в себя год, месяц, день

// Date.prototype.toLocaleTimeString([locales [, options]])
// То же, что и выше, но опции по умолчанию включают в себя часы, минуты, секунды

// Number.prototype.toLocaleString([locales [, options]])
// Форматирует число, используя опции Intl.NumberFormat.

// Все эти методы при запуске создают соответствующий объект Intl.*
// и передают ему опции, можно рассматривать их как укороченные варианты вызова.

// В IE10 рекомендуется использовать полифил

let animals = ['тигр', 'ёж', 'енот', 'ехидна', 'АИСТ', 'ЯК'];

animals.sort((itemA, itemB) => itemA.localeCompare(itemB));

console.log(animals); // АИСТ,ёж,енот,ехидна,тигр,ЯК
