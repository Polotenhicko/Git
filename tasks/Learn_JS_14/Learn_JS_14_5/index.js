// побитовые операторы интерпретируют операны как последовательность 32 битов (нулей и единиц)

// производят операцию и возвращают новую последовательность 32 битов

// они работают с целыми числами в их двоичном представлении

// старший бит слева - научное название для обычного порядка записи цифр
// пример

let a;

a = 0; // 00000000000000000000000000000000
a = 1; // 00000000000000000000000000000001
a = 2; // 00000000000000000000000000000010
a = 3; // 00000000000000000000000000000011
a = 255; // 00000000000000000000000011111111

// каждое число состоит из 32-битов

// дополнение до двойки - название способа поддержки отрицательного
// двоичный вид отрицательного числа получается путём прибавлением всем битам 1

// нули изменяются на единицы, единицы на нули
// а к числу прибавляется 1
// получается тоже число, но со знаком минусом

// 314
// 00000000000000000000000100111010
// -314

// меняем 0 на 1 и 1 на 0
// 11111111111111111111111011000101

// и добавляем 1
// 11111111111111111111111011000101 + 1 = 11111111111111111111111011000110

// -314 = 11111111111111111111111011000110

// принцип дополнения до двойки делит все двоичные представления на 2 множества
// если левый крайний бит равен 0, то число положительное
// если 1, то отрицательный
// поэтому этот бит называется знаковым битом

// Побитовое И (AND)	                a & b	    Ставит 1 на бит результата, для которого соответствующие биты операндов равны 1.
// Побитовое ИЛИ (OR)	                a | b	    Ставит 1 на бит результата, для которого хотя бы один из соответствующих битов операндов равен 1.
// Побитовое исключающее ИЛИ (XOR)	  a ^ b	    Ставит 1 на бит результата, для которого только один из соответствующих битов операндов равен 1 (но не оба).
// Побитовое НЕ (NOT)	                ~a	      Заменяет каждый бит операнда на противоположный.
// Левый сдвиг	                      a << b	  Сдвигает двоичное представление a на b битов влево, добавляя справа нули.
// Правый сдвиг, переносящий знак	    a >> b	  Сдвигает двоичное представление a на b битов вправо, отбрасывая сдвигаемые биты.
// Правый сдвиг с заполнением нулями	a >>> b	  Сдвигает двоичное представление a на b битов вправо, отбрасывая сдвигаемые биты и добавляя нули слева.
