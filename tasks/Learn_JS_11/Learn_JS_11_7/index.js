// обработчики .then/.catch/.finally всегда асинхронны

console.log('Код выполнен');

new Promise((resolve) => resolve('then')).then(console.log);

// Код выполнен
// then

// стандарт предусматривает внутреннюю очередь PromiseJobs
// более известную как очередь микрозадач (microstack queue)

// очередь FIFO, выполнение задач только в том случае, если ничего не запущено

// когда промис выполнен, его обработчики .then/catch/finally попадают в очередь
// когда синхронный код выполнится, то запустится выполнение очереди

// код чтобы выполнить по очереди логи
Promise.resolve()
  .then(() => console.log('промис выполнен!'))
  .then(() => console.log('код выполнен'));

// обработчик unhandledrejection проверяет, опустела ли очередь микрозадач
// и если есть необработанные ошибки промисов, то будет unhandledrejection
