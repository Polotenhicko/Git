// Атака типа clickjacking (англ. «захват клика») позволяет вредоносной странице кликнуть по сайту-жертве от имени посетителя.

// Идея этой атаки очень проста.
// Вот как clickjacking-атака была проведена на Facebook:

// 1. Посетителя заманивают на вредоносную страницу (неважно как).
// 2. На странице есть ссылка, которая выглядит безобидно
// 3. Поверх этой ссылки вредоносная страница размещает прозрачный <iframe> с src с сайта facebook.com таким образом,
//  что кнопка «like» находится прямо над этой ссылкой.Обычно это делается с помощью z - index в CSS.
// 4. При попытке клика на эту ссылку посетитель на самом деле нажимает на кнопку.

// Прозрачность через opactity
// Всё, что нам необходимо для атаки — это расположить <iframe> на вредоносной странице так, чтобы кнопка находилась прямо над ссылкой

// Эта атака срабатывает только на действия мыши (или аналогичные, вроде нажатия пальцем на мобильном устройстве).

// Слабая защита:

if (top != window) {
  top.location = window.location;
}

// top - ссылка на window в самом верху
// В этом случае, если окно обнаруживает, что оно открыто во фрейме, оно автоматически располагает себя сверху.

// Есть много способов его обойти
// Мы можем заблокировать переход, вызванный сменой top.location в обработчике события beforeunload.

// Внешняя страница (принадлежащая хакеру) устанавливает обработчик на это событие, отменяющий его, например, такой:
window.onbeforeunload = function () {
  return false;
};

// Когда iframe пытается изменить top.location, посетитель увидит сообщение с вопросом действительно ли он хочет
//  покинуть эту страницу.В большинстве случаев посетитель ответит отрицательно, поскольку он не знает об ифрейме:
// всё, что он видит – это верхнюю страницу, которую нет причин покидать.Поэтому top.location не изменится!

// Атрибут sandbox
// Одним из действий, которые можно ограничить атрибутом sandbox, является навигация.
// Соответственно ифрейм внутри sandbox не изменит top.location.

// <iframe sandbox="allow-scripts allow-forms" src="facebook.html"></iframe>

// Есть и другие способы обойти эту простую защиту.

// Заголовок X-Frame-Options со стороны сервера может разрешать или запрещать отображение страницы внутри фрейма.
// Заголовок может иметь 3 значения:

// DENY
// Никогда не показывать страницу внутри фрейма.

// SAMEORIGIN
// Разрешить открытие страницы внутри фрейма только в том случае, если родительский документ имеет тот же источник.

// ALLOW-FROM domain
// Разрешить открытие страницы внутри фрейма только в том случае, если родительский документ находится на указанном в заголовке домене.

// Например, Twitter использует X-Frame-Options: SAMEORIGIN.

// У заголовка X-Frame-Options есть побочный эффект. Другие сайты не смогут отобразить нашу страницу во фрейме,
// даже если у них будут на то веские причины.

// Есть решение
// Натянуть div на height: 100%; width: 100% на всю страницу
// и убирать его только когда window == top или если поймём что защита не нужна

if (window.top.document.domain == document.domain) {
  document.getElementById('protector').remove();
}

// Атрибут samesite также может помочь избежать clickjacking-атаки.
// Файл куки с таким атрибутом отправляется на сайт только в том случае, если он открыт напрямую,
// не через фрейм или каким - либо другим способом

// Если сайт, такой как Facebook, при установке авторизующего куки ставит атрибут samesite:
// Set-Cookie: authorization=secret; samesite

// Тогда такие куки не будут отправляться, когда Facebook будет открыт в ифрейме с другого сайта. Так что атака не удастся.

// Но если мы не будет проверять эти куки, то они бесполезны
// И другие сайты смогут отображать инфу, для которой не нужна авторизация

// Но пишут что сайты для анонимных опросов будут уязвимы, хоть там и идёт проверка по ip
