// Можно запускать всплывающие окна
window.open('https://javascript.info/');
// Откроется новое окно с указанным URL
// Большинство современных браузеров по умолчанию будут открывать новую вкладку вместо отдельного окна.

// попапы не очень хороши для мобильных устройств, которые не умеют показывать несколько окон одновременно.

// Однако, для некоторых задач попапы ещё используются, например для OAuth-авторизации (вход через Google/Facebook/…), так как:
// Попап – это отдельное окно со своим JavaScript-окружением. Так что открытие попапа со стороннего,
//     не доверенного сайта вполне безопасно
// Открыть попап очень просто.
// Попап может производить навигацию (менять URL) и отсылать сообщения в основное окно.

// В прошлом злонамеренные сайты заваливали посетителей всплывающими окнами. Такие страницы могли открывать сотни попапов с рекламой.
// Поэтому теперь большинство браузеров пытаются заблокировать всплывающие окна, чтобы защитить пользователя.

// Всплывающее окно блокируется в том случае, если вызов window.open произошёл не в результате действия посетителя
// (например, события onclick).

// попап заблокирован
window.open('https://javascript.info');

// попап будет показан
window.onclick = () => {
  window.open('https://javascript.info');
};

document.body.click(); // не работает

// Синтаксис открытия нового окна: window.open(url, name, params):

// url - понятно что это

// name
// Имя нового окна. У каждого окна есть свойство window.name, в котором можно задавать, какое окно использовать для попапа.
// Таким образом, если уже существует окно с заданным именем – указанный в параметрах URL откроется в нем,
//  в противном случае откроется новое окно.

window.onclick = () => {
  // в новой вкладке будет window.name == 'aaa'
  window.open('https://javascript.info', 'aaa');
};

// params
// Строка параметров для нового окна. Содержит настройки, разделённые запятыми. Важно помнить, что в данной строке
// не должно быть пробелов.Например width = 200, height = 100.

// Параметры в строке params:

// Позиция окна:
// left/top (числа) – координаты верхнего левого угла нового окна на экране.
// Существует ограничение: новое окно не может быть позиционировано вне видимой области экрана.

// width/height (числа) – ширина и высота нового окна.
// Существуют ограничения на минимальную высоту и ширину, которые делают невозможным создание невидимого окна.

// Панели окна:
// menubar (yes/no) – позволяет отобразить или скрыть меню браузера в новом окне.

// toolbar (yes/no) – позволяет отобразить или скрыть панель навигации браузера
// (кнопки вперёд, назад, перезагрузки страницы) нового окна.

// location (yes/no) – позволяет отобразить или скрыть адресную строку нового окна.
// Firefox и IE не позволяют скрывать эту панель по умолчанию.

// status (yes/no) – позволяет отобразить или скрыть строку состояния.
// Как и с адресной строкой, большинство браузеров будут принудительно показывать её.

// resizable (yes/no) – позволяет отключить возможность изменения размера нового окна. Не рекомендуется.

// scrollbars (yes/no) – позволяет отключить полосы прокрутки для нового окна. Не рекомендуется.

// Помимо этого существует некоторое количество не кроссбраузерных значений, которые обычно не используются

// Пример: минималистичное окно

let params = [
  'scrollbars=no',
  'resizable=no',
  'status=no',
  'location=no',
  'toolbar=no',
  'menubar=no',
  'width=0',
  'height=0',
  'left=-1000',
  'top=-1000',
];

window.onclick = () => open('/', 'test', params.join(','));

// В этом примере большинство настроек заблокированы
// Большинство браузеров «исправит» странные значения – как, например, нулевые width/height и отрицательные left/top

// исправим значения и зададим нормальные координаты (left и top) и значения размеров окна (width и height):

params = `scrollbars=no,resizable=no,status=no,location=no,toolbar=no,menubar=no,
width=600,height=300,left=100,top=100`;
window.onclick = () => open('/', 'test', params);

// Большинство браузеров выведет окно с заданными нами настройками.

// Правила для пропущенных параметров:

// Если третий аргумент при вызове open отсутствует или он пустой, будут использованы настройки окна по умолчанию.
// Если строка параметров передана, но некоторые параметры yes/no пропущены, то считается, что указано no
// Если координаты left/top не заданы, браузер попытается открыть новое окно рядом с предыдущим открытым окном
// Если не заданы размеры окна width/height, браузер откроет новое окно с теми же размерами, что и предыдущее открытое окно.

// Доступ к попапу из основного окна
// Вызов open возвращает ссылку на новое окно
// Эта ссылка может быть использована для управления свойствами окна, например, изменения положения и др.

// Например, здесь мы генерируем содержимое попапа из JavaScript:

window.onclick = () => {
  let newWin = window.open('about:blank', 'hello', 'width=200,height=200');
  newWin.document.write('Hello, world!');
};

// А здесь содержимое окна модифицируется после загрузки:

window.onclick = () => {
  let newWindow = open('/', 'example', 'width=300,height=300');
  newWindow.focus();

  console.log(newWindow.location.href); // (*) about:blank, загрузка ещё не началась
  console.log(newWindow); // Window

  newWindow.onload = function () {
    // ждём onload, т.к. идёт загрузка сначала
    // или DOMContentLoaded
    let html = `<div style="font-size:30px">Добро пожаловать!</div>`;
    newWindow.document.body.insertAdjacentHTML('afterbegin', html);
  };
};

// Окна имеют свободный доступ к содержимому друг друга только если они с одного источника (у них совпадают домен, протокол и порт (protocol://domain:port).

// Иначе, например, если основное окно с site.com, а попап с gmail.com, это невозможно по соображениям пользовательской безопасности

// Попап также может обратиться к открывшему его окну по ссылке window.opener. Она равна null для всех окон, кроме попапов.

console.log(window.opener); // null

window.onclick = () => {
  let newWin = window.open('about:blank', 'hello', 'width=200,height=200');

  newWin.document.write("<script>window.opener.document.body.innerHTML = 'Тест'</script>");
  // в главном окне поменяется HTML
};

// Чтобы закрыть окно: win.close()
// Чтобы проверить что закрыто: win.closed

// Технически метод close() доступен для любого окна, но window.close() будет игнорироваться большинством браузеров,
//  если window не было создано с помощью window.open().Так что он сработает только для попапов.

// Если окно закрыто, то его свойство closed имеет значение true

window.onclick = () => {
  let newWindow = open('/', 'example', 'width=300,height=300');

  newWindow.onload = function () {
    newWindow.close();
    console.log(newWindow.closed); // true
  };
};

// Методы для передвижения и изменения размеров окна:

// win.moveBy(x,y)
// Переместить окно относительно текущей позиции на x пикселей вправо и y пикселей вниз.
// Допустимы отрицательные значения(для перемещения окна влево и вверх).

// win.moveTo(x,y)
// Переместить окно на координаты экрана (x,y).

// win.resizeBy(width,height)
// Изменить размер окна на указанные значения width/height относительно текущего размера. Допустимы отрицательные значения.

// win.resizeTo(width,height)
// Изменить размер окна до указанных значений.

// Также существует событие window.onresize.

// Чтобы предотвратить возможные злоупотребления, браузер обычно блокирует эти методы.
// Они гарантированно работают только с попапами, которые мы открыли сами и у которых нет дополнительных вкладок.

// Методами JavaScript нельзя свернуть или развернуть («максимизировать») окно на весь экран.
// За это отвечают функции уровня операционной системы, и они скрыты от фронтенд - разработчиков.

window.onclick = () => {
  let newWindow = open('/', 'example', 'width=300,height=300');

  newWindow.onload = function () {
    const random = (min, max) => Math.round(Math.random() * (max - min) + min);
    // заебись
    setInterval(() => {
      newWindow.resizeTo(random(0, 1080), random(0, 1920));
      newWindow.moveTo(random(0, 1080), random(0, 1920));
    });
  };
};

// Прокрутка такая же как и в обычном браузере

// scrollBy, scrollTo, scrollIntoView(top = true)
// Последнее - Прокрутить окно так, чтобы elem для elem.scrollIntoView(false) появился вверху (по умолчанию) или внизу.

// Также существует событие window.onscroll.

// Раньше на «плохих» сайтах эти методы могли становиться средством манипуляции. Например:

window.onblur = () => window.focus();

// Из-за этого в браузерах и появились ограничения, которые препятствуют такого рода поведению фокуса.

// Например, мобильный браузер обычно полностью игнорирует такие вызовы метода window.focus().
// Также фокусировка не работает, когда попап открыт в отдельной вкладке

// Когда мы открываем попап, может быть хорошей идеей запустить для него newWindow.focus().
// Для некоторых комбинаций браузера и операционной системы это устранит неоднозначность – заметит ли пользователь это новое окно.

window.onclick = () => {
  let newWindow = open('/', 'example', 'width=300,height=300');
  newWindow.focus();
  newWindow.onblur = () => newWindow.focus();
};

// Всё ещё возможно если жму на ту же вкладку где открыл
