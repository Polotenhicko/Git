// Возобновляемая загрузка файлов

// При помощи fetch достаточно просто отправить файл на сервер.
// Но как возобновить загрузку, если соединение прервалось? Для этого нет готовой настройки,
// но у нас есть все средства, чтобы решить эту задачу самостоятельно.
// Поскольку fetch не позволяет отслеживать прогресс отправки, то мы будем использовать XMLHttpRequest.

// Чтобы возобновить отправку, нам нужно знать, какая часть файла была успешно передана до того, как соединение прервалось.

// Можно установить обработчик xhr.upload.onprogress, чтобы отслеживать процесс загрузки, но, к сожалению, это бесполезно,
// так как этот обработчик вызывается, только когда данные отправляются, но были ли они получены сервером?
// Браузер этого не знает.

// Для возобновления же загрузки нужно точно знать, сколько байт было получено сервером.
// И только сам сервер может это сказать, поэтому будем делать для этого отдельный запрос.

// Алгоритм

// 1. Во-первых, создадим уникальный идентификатор для файла, который собираемся загружать:
// Если имя или размер или дата модификация файла изменятся, то у него уже будет другой fileId.

let fileId = file.name + '-' + file.size + '-' + +file.lastModifiedDate;

// 2. Далее, посылаем запрос к серверу с просьбой указать количество уже полученных байтов:

(async () => {
  const response = await fetch('status', {
    headers: {
      'X-File-Id': fileId,
    },
  });
  const startByte = +(await response.text());

  // Предполагается, что сервер учитывает загружаемые файлы с помощью заголовка X-File-Id.
  // Это на стороне сервера должно быть реализовано.
  // Если ему неизвестен этот fileId, то он должен вернуть 0

  // 3. Затем мы можем использовать метод slice объекта Blob, чтобы отправить данные, начиная со startByte байта:

  const xhr = new XMLHttpRequest();
  xhr.open('POST', 'upload');

  // Идентификатор файла, чтобы сервер знал, что мы загружаем
  xhr.setRequestHeader('X-FIle-Id', fileId);

  // Номер байта, начиная с которого мы будем отправлять данные.
  // Таким образом, сервер поймёт, с какого момента мы возобновляем загрузку
  xhr.setRequestHeader('X-Start-Byte', startByte);

  xhr.upload.onprogress = (e) => {
    console.log('Upload', startByte + e.loaded, startByte + e.total);
  };

  // файл file может быть взят из input.files[0] или другого источника
  xhr.send(file.slice(startByte));

  // метод slice лежит в инстансе blob, а File наследуется от Blob
})();

// Сервер должен проверить информацию на своей стороне, и если обнаружится, что такой файл уже когда-то загружался,
// и его текущий размер равен значению из заголовка X - Start - Byte, то вновь принимаемые данные добавлять в этот файл.
