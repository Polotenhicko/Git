// Спецификация Server-Sent Events описывает встроенный класс EventSource, который позволяет поддерживать соединение с сервером
//  и получать от него события.

// Как и в случае с WebSocket, соединение постоянно.
// Но есть несколько важных различий:

// WebSocket:
// Двунаправленность: и сервер, и клиент могут обмениваться сообщениями
// Бинарные и текстовые данные
// Протокол WebSocket

// EventSource
// Однонаправленность: данные посылает только сервер
// Только текст
// Обычный HTTP

// Причина использовать EventSource: он проще
// Если нам нужно получать поток данных с сервера: неважно, сообщения в чате или же цены для магазина – с этим легко справится EventSource

//  К тому же, он поддерживает автоматическое переподключение при потере соединения

// Чтобы начать получать данные, нам нужно просто создать new EventSource(url).
// Браузер установит соединение с url и будет поддерживать его открытым, ожидая события.

// Сервер должен ответить со статусом 200 и заголовком Content-Type: text/event-stream
// затем он должен поддерживать соединение открытым и отправлять сообщения в особом формате:

// data: Сообщение 1

// data: Сообщение 2

// data: Сообщение 3
// data: в две строки

// Текст сообщения указывается после data:, пробел после двоеточия необязателен.
// Сообщения разделяются двойным переносом строки \n\n.
// Чтобы разделить сообщение на несколько строк, мы можем отправить несколько data: подряд (третье сообщение).

// На практике сложные сообщения обычно отправляются в формате JSON, в котором перевод строки кодируется как \n

// Пример:

// data: {"user":"Джон","message":"Первая строка\n Вторая строка"}

// Для каждого сообщения генерируется событие message:

let eventSource = new EventSource('https://learn.javascript.ru/server-sent-events/events/subscribe');

eventSource.onmessage = (e) => {
  console.log('Новое сообщение', e.data);
};

// EventSource, как и fetch, поддерживает кросс-доменные запросы
// Сервер получит заголовок Origin и должен будет ответить с заголовком Access-Control-Allow-Origin.

// Чтобы послать авторизационные данные, следует установить дополнительную опцию withCredentials:

source = new EventSource('https://another-site.com/events', {
  withCredentials: true,
});

// После создания new EventSource подключается к серверу и, если соединение обрывается, – переподключается.
// По умолчанию между попытками возобновить соединение будет небольшая пауза в несколько секунд.

// Сервер может выставить рекомендуемую задержку, указав в ответе retry: (в миллисекундах):
// retry: 15000
// data: Привет, я выставил задержку переподключения в 15 секунд

// Поле retry: может посылаться как вместе с данными, так и отдельным сообщением.

// Если сервер хочет остановить попытки переподключения, он должен ответить со статусом 204.
// Если браузер хочет прекратить соединение, он может вызвать eventSource.close()
source.close();

// Также переподключение не произойдёт, если в ответе указан неверный Content-Type или его статус отличается от 301, 307, 200 и 204.
// Браузер создаст событие "error" и не будет восстанавливать соединение.

// Когда соединение прерывается из-за проблем с сетью, ни сервер, ни клиент не могут быть уверены в том,
// какие сообщения были доставлены, а какие – нет.

// Чтобы правильно возобновить подключение, каждое сообщение должно иметь поле id:

// Получая сообщение с указанным id:, браузер:

// Установит его значение свойству eventSource.lastEventId.
// При переподключении отправит заголовок Last-Event-ID с этим id, чтобы сервер мог переслать последующие сообщения.

// Нужно указывать id после data

// У объекта EventSource есть свойство readyState, имеющее одно из трёх значений:

// EventSource.CONNECTING = 0; // подключение или переподключение
// EventSource.OPEN = 1;       // подключено
// EventSource.CLOSED = 2;     // подключение закрыто

console.log(source.readyState); // 2
console.log(source.OPEN); // 1

// При создании объекта и разрыве соединения оно автоматически устанавливается в значение EventSource.CONNECTING (равно 0).

// По умолчанию объект EventSource генерирует 3 события:

// message – получено сообщение, доступно как event.data.
// open – соединение открыто.
// error – не удалось установить соединение, например, сервер вернул статус 500.

// Сервер может указать другой тип события с помощью event: ... в начале сообщения.
// Например:

// event: join;
// data: Боб;

// data: Привет;

// event: leave;
// data: Боб;

// ебануться сколько всего

// Для пользовательских событий подойдёт только addEventListener
